
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000004ce  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001528  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0b  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c6b  00000000  00000000  00002643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  000032b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000573  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a40  00000000  00000000  00003a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000044db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0a 02 	call	0x414	; 0x414 <main>
  7a:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
  82:	44 23       	and	r20, r20
  84:	19 f0       	breq	.+6      	; 0x8c <DIO_SetPin_Direction+0xa>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	c9 f1       	breq	.+114    	; 0xfc <DIO_SetPin_Direction+0x7a>
  8a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 f0       	breq	.+36     	; 0xb4 <DIO_SetPin_Direction+0x32>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPin_Direction+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	d9 f0       	breq	.+54     	; 0xcc <DIO_SetPin_Direction+0x4a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	29 f1       	breq	.+74     	; 0xe4 <DIO_SetPin_Direction+0x62>
  9a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPin_Direction+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPin_Direction+0x22>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
			break;
  b2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SetPin_Direction+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SetPin_Direction+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	87 bb       	out	0x17, r24	; 23
			break;
  ca:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  cc:	24 b3       	in	r18, 0x14	; 20
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPin_Direction+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPin_Direction+0x52>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	84 bb       	out	0x14, r24	; 20
			break;
  e2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  e4:	21 b3       	in	r18, 0x11	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPin_Direction+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPin_Direction+0x6a>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	81 bb       	out	0x11, r24	; 17
			break;
  fa:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	89 f0       	breq	.+34     	; 0x122 <DIO_SetPin_Direction+0xa0>
 100:	28 f0       	brcs	.+10     	; 0x10c <DIO_SetPin_Direction+0x8a>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	c9 f0       	breq	.+50     	; 0x138 <DIO_SetPin_Direction+0xb6>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	11 f1       	breq	.+68     	; 0x14e <DIO_SetPin_Direction+0xcc>
 10a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0x96>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0x92>
 11c:	82 2b       	or	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
			break;
 120:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xac>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xa8>
 132:	82 2b       	or	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
			break;
 136:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xbe>
 148:	82 2b       	or	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
			break;
 14c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPin_Direction+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPin_Direction+0xd4>
 15e:	82 2b       	or	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)/*Output Mode*/
{
	switch(value)
 164:	44 23       	and	r20, r20
 166:	19 f0       	breq	.+6      	; 0x16e <DIO_SetPin_Value+0xa>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	c9 f1       	breq	.+114    	; 0x1de <DIO_SetPin_Value+0x7a>
 16c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 f0       	breq	.+36     	; 0x196 <DIO_SetPin_Value+0x32>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SetPin_Value+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	d9 f0       	breq	.+54     	; 0x1ae <DIO_SetPin_Value+0x4a>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	29 f1       	breq	.+74     	; 0x1c6 <DIO_SetPin_Value+0x62>
 17c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPin_Value+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPin_Value+0x22>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
			break;
 194:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 196:	28 b3       	in	r18, 0x18	; 24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPin_Value+0x3e>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPin_Value+0x3a>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	88 bb       	out	0x18, r24	; 24
			break;
 1ac:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPin_Value+0x56>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPin_Value+0x52>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
			break;
 1c4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1c6:	22 b3       	in	r18, 0x12	; 18
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPin_Value+0x6e>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPin_Value+0x6a>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	82 bb       	out	0x12, r24	; 18
			break;
 1dc:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	89 f0       	breq	.+34     	; 0x204 <DIO_SetPin_Value+0xa0>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_SetPin_Value+0x8a>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c9 f0       	breq	.+50     	; 0x21a <DIO_SetPin_Value+0xb6>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	11 f1       	breq	.+68     	; 0x230 <DIO_SetPin_Value+0xcc>
 1ec:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPin_Value+0x96>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPin_Value+0x92>
 1fe:	82 2b       	or	r24, r18
 200:	8b bb       	out	0x1b, r24	; 27
			break;
 202:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPin_Value+0xac>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPin_Value+0xa8>
 214:	82 2b       	or	r24, r18
 216:	88 bb       	out	0x18, r24	; 24
			break;
 218:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 21a:	25 b3       	in	r18, 0x15	; 21
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPin_Value+0xc2>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPin_Value+0xbe>
 22a:	82 2b       	or	r24, r18
 22c:	85 bb       	out	0x15, r24	; 21
			break;
 22e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 230:	22 b3       	in	r18, 0x12	; 18
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPin_Value+0xd8>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPin_Value+0xd4>
 240:	82 2b       	or	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <LCD_Write_Command>:
	#else
	#warning "Wrong Mode"
	#endif
}
void LCD_Write_Command(Uint8t command)
{
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_LOW);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	9c 2f       	mov	r25, r28
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	89 2b       	or	r24, r25
 272:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Write_Command+0x3c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Write_Command+0x42>
 288:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command  << 4) | (PORTA & 0x0F);
 294:	20 e1       	ldi	r18, 0x10	; 16
 296:	c2 9f       	mul	r28, r18
 298:	c0 01       	movw	r24, r0
 29a:	11 24       	eor	r1, r1
 29c:	9b b3       	in	r25, 0x1b	; 27
 29e:	9f 70       	andi	r25, 0x0F	; 15
 2a0:	89 2b       	or	r24, r25
 2a2:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_Write_Command+0x6c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_Write_Command+0x72>
 2b8:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	9e e4       	ldi	r25, 0x4E	; 78
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_Write_Command+0x82>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_Write_Command+0x88>
 2ce:	00 00       	nop
	_delay_ms(5);
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	#if LCD_Mode == 4
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RS, LCD_OUTPUT);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RW, LCD_OUTPUT);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_EN, LCD_OUTPUT);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA4, LCD_OUTPUT);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA5, LCD_OUTPUT);
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	65 e0       	ldi	r22, 0x05	; 5
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA6, LCD_OUTPUT);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA7, LCD_OUTPUT);
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	67 e0       	ldi	r22, 0x07	; 7
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	81 ee       	ldi	r24, 0xE1	; 225
 31e:	94 e0       	ldi	r25, 0x04	; 4
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <LCD_Init+0x4c>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_Init+0x56>
 32a:	00 00       	nop
	_delay_ms(100);/*LCD MC is slowest than ATMEGA32 MC*/
	LCD_Write_Command(0x02);
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
	LCD_Write_Command(0x33);
 332:	83 e3       	ldi	r24, 0x33	; 51
 334:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
	LCD_Write_Command(0x32);
 338:	82 e3       	ldi	r24, 0x32	; 50
 33a:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
	LCD_Write_Command(0x28);
 33e:	88 e2       	ldi	r24, 0x28	; 40
 340:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 344:	8c e0       	ldi	r24, 0x0C	; 12
 346:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
	LCD_Write_Command(0x01);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
	LCD_Write_Command(0x06);
 350:	86 e0       	ldi	r24, 0x06	; 6
 352:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
 356:	08 95       	ret

00000358 <LCD_Write_Data>:
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
	_delay_ms(5);
}
void LCD_Write_Data(Uint8t data)
{
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_HIGH);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data & 0xF0) | (PORTA & 0x0F);
 37a:	8b b3       	in	r24, 0x1b	; 27
 37c:	9c 2f       	mov	r25, r28
 37e:	90 7f       	andi	r25, 0xF0	; 240
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	89 2b       	or	r24, r25
 384:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 390:	8f e9       	ldi	r24, 0x9F	; 159
 392:	9f e0       	ldi	r25, 0x0F	; 15
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_Write_Data+0x3c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_Write_Data+0x42>
 39a:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data << 4) | (PORTA & 0x0F);
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	c2 9f       	mul	r28, r18
 3aa:	c0 01       	movw	r24, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	9b b3       	in	r25, 0x1b	; 27
 3b0:	9f 70       	andi	r25, 0x0F	; 15
 3b2:	89 2b       	or	r24, r25
 3b4:	8b bb       	out	0x1b, r24	; 27
	//PORTA = (data & 0xF0) | (PORTA & 0x0F);
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_Write_Data+0x6c>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_Write_Data+0x72>
 3ca:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 3d6:	8f e1       	ldi	r24, 0x1F	; 31
 3d8:	9e e4       	ldi	r25, 0x4E	; 78
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_Write_Data+0x82>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_Write_Data+0x88>
 3e0:	00 00       	nop
	_delay_ms(5);
}
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Write_Command>
 3ec:	08 95       	ret

000003ee <LCD_Write_String>:
}
void LCD_Write_String(Uint8t* str)/**/
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
	while(*str != '\0')
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f6:	8f e9       	ldi	r24, 0x9F	; 159
 3f8:	9f e0       	ldi	r25, 0x0F	; 15
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_Write_String+0xc>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
	{
		_delay_ms(1);/*LCD MC,I swear is slowest than MC we have*/
		LCD_Write_Data(*str);
 402:	89 91       	ld	r24, Y+
 404:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Write_Data>
{
	LCD_Write_Command(0x01);
}
void LCD_Write_String(Uint8t* str)/**/
{
	while(*str != '\0')
 408:	88 81       	ld	r24, Y
 40a:	81 11       	cpse	r24, r1
 40c:	f4 cf       	rjmp	.-24     	; 0x3f6 <LCD_Write_String+0x8>
	{
		_delay_ms(1);/*LCD MC,I swear is slowest than MC we have*/
		LCD_Write_Data(*str);
		str++;
	}
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <main>:
#include "UART.h"

int main(void)
{
	Uint8t Data_in = 0;
	SPI_INIT();
 414:	0e 94 30 02 	call	0x460	; 0x460 <SPI_INIT>
	LCD_Init();
 418:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_Init>
	UART_Init();
 41c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_Init>
	LCD_Write_String((Uint8t*)"Welcom");
 420:	80 e6       	ldi	r24, 0x60	; 96
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LCD_Write_String>
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	83 e2       	ldi	r24, 0x23	; 35
 42c:	94 ef       	ldi	r25, 0xF4	; 244
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <main+0x1a>
 436:	00 c0       	rjmp	.+0      	; 0x438 <main+0x24>
 438:	00 00       	nop
	_delay_ms(5000);
	LCD_Clear();
 43a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_Clear>
	/* Replace with your application code */
	while (1)
	{
		Data_in = UART_Rx();
 43e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <UART_Rx>
 442:	c8 2f       	mov	r28, r24
		if(Data_in != 0)
 444:	88 23       	and	r24, r24
 446:	d9 f3       	breq	.-10     	; 0x43e <main+0x2a>
		{
			//LCD_Clear();
			LCD_Write_Data(Data_in);
 448:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_Write_Data>
 44c:	8f e3       	ldi	r24, 0x3F	; 63
 44e:	9c e9       	ldi	r25, 0x9C	; 156
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <main+0x3c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <main+0x42>
 456:	00 00       	nop
			_delay_ms(10);
			SPI_TRANSMIT(Data_in);
 458:	8c 2f       	mov	r24, r28
 45a:	0e 94 55 02 	call	0x4aa	; 0x4aa <SPI_TRANSMIT>
 45e:	ef cf       	rjmp	.-34     	; 0x43e <main+0x2a>

00000460 <SPI_INIT>:

void SPI_INIT(void)
{
	#if SPI_MODE == MASTER
	/*Define directions for Master pins*/
	SET_BIT(DDRB, MOSI);                                          /*MOSI-OUTPUT*/
 460:	87 b3       	in	r24, 0x17	; 23
 462:	80 62       	ori	r24, 0x20	; 32
 464:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRB, MISO);                                           /*MISO-INPUT*/
 466:	87 b3       	in	r24, 0x17	; 23
 468:	8f 7b       	andi	r24, 0xBF	; 191
 46a:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, SCK);                                         /*CLK-OUTPUT*/
 46c:	87 b3       	in	r24, 0x17	; 23
 46e:	80 68       	ori	r24, 0x80	; 128
 470:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB, SS);
 472:	87 b3       	in	r24, 0x17	; 23
 474:	80 61       	ori	r24, 0x10	; 16
 476:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPCR, SPIE);                                          /*Disable SPI Interrupt*/
 478:	8d b1       	in	r24, 0x0d	; 13
 47a:	8f 77       	andi	r24, 0x7F	; 127
 47c:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, MSTR);                                          /*Select Master Mode*/
 47e:	8d b1       	in	r24, 0x0d	; 13
 480:	80 61       	ori	r24, 0x10	; 16
 482:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, DORD);                                          /*Data order mode-LSB First*/
 484:	8d b1       	in	r24, 0x0d	; 13
 486:	80 62       	ori	r24, 0x20	; 32
 488:	8d b9       	out	0x0d, r24	; 13
	CLR_BIT(SPCR, CPOL);                                          /*Clock Phase-LOW*/
 48a:	8d b1       	in	r24, 0x0d	; 13
 48c:	87 7f       	andi	r24, 0xF7	; 247
 48e:	8d b9       	out	0x0d, r24	; 13
	CLR_BIT(SPSR, SPI2X);SET_BIT(SPCR, SPR1);SET_BIT(SPCR, SPR0); /*Prescaler-128*/
 490:	8e b1       	in	r24, 0x0e	; 14
 492:	8e 7f       	andi	r24, 0xFE	; 254
 494:	8e b9       	out	0x0e, r24	; 14
 496:	8d b1       	in	r24, 0x0d	; 13
 498:	82 60       	ori	r24, 0x02	; 2
 49a:	8d b9       	out	0x0d, r24	; 13
 49c:	8d b1       	in	r24, 0x0d	; 13
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SPCR, SPE);                                             /*SS-OUTPUT*/
 4a2:	8d b1       	in	r24, 0x0d	; 13
 4a4:	80 64       	ori	r24, 0x40	; 64
 4a6:	8d b9       	out	0x0d, r24	; 13
 4a8:	08 95       	ret

000004aa <SPI_TRANSMIT>:
	SET_BIT(SPCR, SPE);                                           /*Enable SPI*/                                         /*SS-INPUT*/
	#endif
}
void SPI_TRANSMIT(Uint8t data)
{
	SPDR = data;
 4aa:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1);
 4ac:	77 9b       	sbis	0x0e, 7	; 14
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <SPI_TRANSMIT+0x2>
}
 4b0:	08 95       	ret

000004b2 <UART_Init>:
UART_STATUS UART_Transmit(Uint8t data)
{
	UDR = data;
	while (GET_BIT(UCSRA, TXC) != 1);
	return UART_OK;
}
 4b2:	88 e1       	ldi	r24, 0x18	; 24
 4b4:	8a b9       	out	0x0a, r24	; 10
 4b6:	86 e8       	ldi	r24, 0x86	; 134
 4b8:	80 bd       	out	0x20, r24	; 32
 4ba:	89 e1       	ldi	r24, 0x19	; 25
 4bc:	89 b9       	out	0x09, r24	; 9
 4be:	10 bc       	out	0x20, r1	; 32
 4c0:	08 95       	ret

000004c2 <UART_Rx>:
/*Receiving*/
Uint8t UART_Rx(void)
{
	Uint8t data;
	while (GET_BIT(UCSRA, RXC) != 1);
 4c2:	5f 9b       	sbis	0x0b, 7	; 11
 4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <UART_Rx>
	data = UDR;
 4c6:	8c b1       	in	r24, 0x0c	; 12
	return data;
}
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
